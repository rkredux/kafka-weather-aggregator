/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.weather.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro Schema for the station weather */
@org.apache.avro.specific.AvroGenerated
public class Weather extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 36248202450469104L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Weather\",\"namespace\":\"com.weather.example\",\"doc\":\"Avro Schema for the station weather\",\"fields\":[{\"name\":\"observationDateTimeUnix\",\"type\":\"long\",\"doc\":\"observation unix seconds in UTC\"},{\"name\":\"location\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"name of the location\"},{\"name\":\"locationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"location id\"},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"country of the location\"},{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"latitude coordinate of the location\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"longitude coordinate of the location\"},{\"name\":\"temp\",\"type\":\"double\",\"doc\":\"current observed temperature in kelvin\"},{\"name\":\"feelsLikeTemp\",\"type\":\"double\",\"doc\":\"feels like temp in kelvin\"},{\"name\":\"minimumTemp\",\"type\":\"double\",\"doc\":\"minimum current temp observed in the location\"},{\"name\":\"maximumTemp\",\"type\":\"double\",\"doc\":\"maximum current temp observed in the location\"},{\"name\":\"pressure\",\"type\":\"double\",\"doc\":\"Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa\"},{\"name\":\"humidity\",\"type\":\"double\",\"doc\":\"observed humidity at the location in %\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Weather> ENCODER =
      new BinaryMessageEncoder<Weather>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Weather> DECODER =
      new BinaryMessageDecoder<Weather>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Weather> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Weather> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Weather> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Weather>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Weather to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Weather from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Weather instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Weather fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** observation unix seconds in UTC */
   private long observationDateTimeUnix;
  /** name of the location */
   private java.lang.String location;
  /** location id */
   private java.lang.String locationId;
  /** country of the location */
   private java.lang.String country;
  /** latitude coordinate of the location */
   private double latitude;
  /** longitude coordinate of the location */
   private double longitude;
  /** current observed temperature in kelvin */
   private double temp;
  /** feels like temp in kelvin */
   private double feelsLikeTemp;
  /** minimum current temp observed in the location */
   private double minimumTemp;
  /** maximum current temp observed in the location */
   private double maximumTemp;
  /** Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa */
   private double pressure;
  /** observed humidity at the location in % */
   private double humidity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Weather() {}

  /**
   * All-args constructor.
   * @param observationDateTimeUnix observation unix seconds in UTC
   * @param location name of the location
   * @param locationId location id
   * @param country country of the location
   * @param latitude latitude coordinate of the location
   * @param longitude longitude coordinate of the location
   * @param temp current observed temperature in kelvin
   * @param feelsLikeTemp feels like temp in kelvin
   * @param minimumTemp minimum current temp observed in the location
   * @param maximumTemp maximum current temp observed in the location
   * @param pressure Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa
   * @param humidity observed humidity at the location in %
   */
  public Weather(java.lang.Long observationDateTimeUnix, java.lang.String location, java.lang.String locationId, java.lang.String country, java.lang.Double latitude, java.lang.Double longitude, java.lang.Double temp, java.lang.Double feelsLikeTemp, java.lang.Double minimumTemp, java.lang.Double maximumTemp, java.lang.Double pressure, java.lang.Double humidity) {
    this.observationDateTimeUnix = observationDateTimeUnix;
    this.location = location;
    this.locationId = locationId;
    this.country = country;
    this.latitude = latitude;
    this.longitude = longitude;
    this.temp = temp;
    this.feelsLikeTemp = feelsLikeTemp;
    this.minimumTemp = minimumTemp;
    this.maximumTemp = maximumTemp;
    this.pressure = pressure;
    this.humidity = humidity;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return observationDateTimeUnix;
    case 1: return location;
    case 2: return locationId;
    case 3: return country;
    case 4: return latitude;
    case 5: return longitude;
    case 6: return temp;
    case 7: return feelsLikeTemp;
    case 8: return minimumTemp;
    case 9: return maximumTemp;
    case 10: return pressure;
    case 11: return humidity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: observationDateTimeUnix = (java.lang.Long)value$; break;
    case 1: location = value$ != null ? value$.toString() : null; break;
    case 2: locationId = value$ != null ? value$.toString() : null; break;
    case 3: country = value$ != null ? value$.toString() : null; break;
    case 4: latitude = (java.lang.Double)value$; break;
    case 5: longitude = (java.lang.Double)value$; break;
    case 6: temp = (java.lang.Double)value$; break;
    case 7: feelsLikeTemp = (java.lang.Double)value$; break;
    case 8: minimumTemp = (java.lang.Double)value$; break;
    case 9: maximumTemp = (java.lang.Double)value$; break;
    case 10: pressure = (java.lang.Double)value$; break;
    case 11: humidity = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'observationDateTimeUnix' field.
   * @return observation unix seconds in UTC
   */
  public long getObservationDateTimeUnix() {
    return observationDateTimeUnix;
  }



  /**
   * Gets the value of the 'location' field.
   * @return name of the location
   */
  public java.lang.String getLocation() {
    return location;
  }



  /**
   * Gets the value of the 'locationId' field.
   * @return location id
   */
  public java.lang.String getLocationId() {
    return locationId;
  }



  /**
   * Gets the value of the 'country' field.
   * @return country of the location
   */
  public java.lang.String getCountry() {
    return country;
  }



  /**
   * Gets the value of the 'latitude' field.
   * @return latitude coordinate of the location
   */
  public double getLatitude() {
    return latitude;
  }



  /**
   * Gets the value of the 'longitude' field.
   * @return longitude coordinate of the location
   */
  public double getLongitude() {
    return longitude;
  }



  /**
   * Gets the value of the 'temp' field.
   * @return current observed temperature in kelvin
   */
  public double getTemp() {
    return temp;
  }



  /**
   * Gets the value of the 'feelsLikeTemp' field.
   * @return feels like temp in kelvin
   */
  public double getFeelsLikeTemp() {
    return feelsLikeTemp;
  }



  /**
   * Gets the value of the 'minimumTemp' field.
   * @return minimum current temp observed in the location
   */
  public double getMinimumTemp() {
    return minimumTemp;
  }



  /**
   * Gets the value of the 'maximumTemp' field.
   * @return maximum current temp observed in the location
   */
  public double getMaximumTemp() {
    return maximumTemp;
  }



  /**
   * Gets the value of the 'pressure' field.
   * @return Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa
   */
  public double getPressure() {
    return pressure;
  }



  /**
   * Gets the value of the 'humidity' field.
   * @return observed humidity at the location in %
   */
  public double getHumidity() {
    return humidity;
  }



  /**
   * Creates a new Weather RecordBuilder.
   * @return A new Weather RecordBuilder
   */
  public static com.weather.example.Weather.Builder newBuilder() {
    return new com.weather.example.Weather.Builder();
  }

  /**
   * Creates a new Weather RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Weather RecordBuilder
   */
  public static com.weather.example.Weather.Builder newBuilder(com.weather.example.Weather.Builder other) {
    if (other == null) {
      return new com.weather.example.Weather.Builder();
    } else {
      return new com.weather.example.Weather.Builder(other);
    }
  }

  /**
   * Creates a new Weather RecordBuilder by copying an existing Weather instance.
   * @param other The existing instance to copy.
   * @return A new Weather RecordBuilder
   */
  public static com.weather.example.Weather.Builder newBuilder(com.weather.example.Weather other) {
    if (other == null) {
      return new com.weather.example.Weather.Builder();
    } else {
      return new com.weather.example.Weather.Builder(other);
    }
  }

  /**
   * RecordBuilder for Weather instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Weather>
    implements org.apache.avro.data.RecordBuilder<Weather> {

    /** observation unix seconds in UTC */
    private long observationDateTimeUnix;
    /** name of the location */
    private java.lang.String location;
    /** location id */
    private java.lang.String locationId;
    /** country of the location */
    private java.lang.String country;
    /** latitude coordinate of the location */
    private double latitude;
    /** longitude coordinate of the location */
    private double longitude;
    /** current observed temperature in kelvin */
    private double temp;
    /** feels like temp in kelvin */
    private double feelsLikeTemp;
    /** minimum current temp observed in the location */
    private double minimumTemp;
    /** maximum current temp observed in the location */
    private double maximumTemp;
    /** Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa */
    private double pressure;
    /** observed humidity at the location in % */
    private double humidity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.weather.example.Weather.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.observationDateTimeUnix)) {
        this.observationDateTimeUnix = data().deepCopy(fields()[0].schema(), other.observationDateTimeUnix);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.locationId)) {
        this.locationId = data().deepCopy(fields()[2].schema(), other.locationId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.latitude)) {
        this.latitude = data().deepCopy(fields()[4].schema(), other.latitude);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.longitude)) {
        this.longitude = data().deepCopy(fields()[5].schema(), other.longitude);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.temp)) {
        this.temp = data().deepCopy(fields()[6].schema(), other.temp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.feelsLikeTemp)) {
        this.feelsLikeTemp = data().deepCopy(fields()[7].schema(), other.feelsLikeTemp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.minimumTemp)) {
        this.minimumTemp = data().deepCopy(fields()[8].schema(), other.minimumTemp);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.maximumTemp)) {
        this.maximumTemp = data().deepCopy(fields()[9].schema(), other.maximumTemp);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.pressure)) {
        this.pressure = data().deepCopy(fields()[10].schema(), other.pressure);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.humidity)) {
        this.humidity = data().deepCopy(fields()[11].schema(), other.humidity);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing Weather instance
     * @param other The existing instance to copy.
     */
    private Builder(com.weather.example.Weather other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.observationDateTimeUnix)) {
        this.observationDateTimeUnix = data().deepCopy(fields()[0].schema(), other.observationDateTimeUnix);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.locationId)) {
        this.locationId = data().deepCopy(fields()[2].schema(), other.locationId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.latitude)) {
        this.latitude = data().deepCopy(fields()[4].schema(), other.latitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.longitude)) {
        this.longitude = data().deepCopy(fields()[5].schema(), other.longitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.temp)) {
        this.temp = data().deepCopy(fields()[6].schema(), other.temp);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.feelsLikeTemp)) {
        this.feelsLikeTemp = data().deepCopy(fields()[7].schema(), other.feelsLikeTemp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.minimumTemp)) {
        this.minimumTemp = data().deepCopy(fields()[8].schema(), other.minimumTemp);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.maximumTemp)) {
        this.maximumTemp = data().deepCopy(fields()[9].schema(), other.maximumTemp);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.pressure)) {
        this.pressure = data().deepCopy(fields()[10].schema(), other.pressure);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.humidity)) {
        this.humidity = data().deepCopy(fields()[11].schema(), other.humidity);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'observationDateTimeUnix' field.
      * observation unix seconds in UTC
      * @return The value.
      */
    public long getObservationDateTimeUnix() {
      return observationDateTimeUnix;
    }


    /**
      * Sets the value of the 'observationDateTimeUnix' field.
      * observation unix seconds in UTC
      * @param value The value of 'observationDateTimeUnix'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setObservationDateTimeUnix(long value) {
      validate(fields()[0], value);
      this.observationDateTimeUnix = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'observationDateTimeUnix' field has been set.
      * observation unix seconds in UTC
      * @return True if the 'observationDateTimeUnix' field has been set, false otherwise.
      */
    public boolean hasObservationDateTimeUnix() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'observationDateTimeUnix' field.
      * observation unix seconds in UTC
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearObservationDateTimeUnix() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * name of the location
      * @return The value.
      */
    public java.lang.String getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * name of the location
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setLocation(java.lang.String value) {
      validate(fields()[1], value);
      this.location = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * name of the location
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'location' field.
      * name of the location
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearLocation() {
      location = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'locationId' field.
      * location id
      * @return The value.
      */
    public java.lang.String getLocationId() {
      return locationId;
    }


    /**
      * Sets the value of the 'locationId' field.
      * location id
      * @param value The value of 'locationId'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setLocationId(java.lang.String value) {
      validate(fields()[2], value);
      this.locationId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'locationId' field has been set.
      * location id
      * @return True if the 'locationId' field has been set, false otherwise.
      */
    public boolean hasLocationId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'locationId' field.
      * location id
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearLocationId() {
      locationId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * country of the location
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * country of the location
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setCountry(java.lang.String value) {
      validate(fields()[3], value);
      this.country = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * country of the location
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'country' field.
      * country of the location
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearCountry() {
      country = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * latitude coordinate of the location
      * @return The value.
      */
    public double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * latitude coordinate of the location
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setLatitude(double value) {
      validate(fields()[4], value);
      this.latitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * latitude coordinate of the location
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'latitude' field.
      * latitude coordinate of the location
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearLatitude() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * longitude coordinate of the location
      * @return The value.
      */
    public double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * longitude coordinate of the location
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setLongitude(double value) {
      validate(fields()[5], value);
      this.longitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * longitude coordinate of the location
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'longitude' field.
      * longitude coordinate of the location
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearLongitude() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'temp' field.
      * current observed temperature in kelvin
      * @return The value.
      */
    public double getTemp() {
      return temp;
    }


    /**
      * Sets the value of the 'temp' field.
      * current observed temperature in kelvin
      * @param value The value of 'temp'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setTemp(double value) {
      validate(fields()[6], value);
      this.temp = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'temp' field has been set.
      * current observed temperature in kelvin
      * @return True if the 'temp' field has been set, false otherwise.
      */
    public boolean hasTemp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'temp' field.
      * current observed temperature in kelvin
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearTemp() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'feelsLikeTemp' field.
      * feels like temp in kelvin
      * @return The value.
      */
    public double getFeelsLikeTemp() {
      return feelsLikeTemp;
    }


    /**
      * Sets the value of the 'feelsLikeTemp' field.
      * feels like temp in kelvin
      * @param value The value of 'feelsLikeTemp'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setFeelsLikeTemp(double value) {
      validate(fields()[7], value);
      this.feelsLikeTemp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'feelsLikeTemp' field has been set.
      * feels like temp in kelvin
      * @return True if the 'feelsLikeTemp' field has been set, false otherwise.
      */
    public boolean hasFeelsLikeTemp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'feelsLikeTemp' field.
      * feels like temp in kelvin
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearFeelsLikeTemp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'minimumTemp' field.
      * minimum current temp observed in the location
      * @return The value.
      */
    public double getMinimumTemp() {
      return minimumTemp;
    }


    /**
      * Sets the value of the 'minimumTemp' field.
      * minimum current temp observed in the location
      * @param value The value of 'minimumTemp'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setMinimumTemp(double value) {
      validate(fields()[8], value);
      this.minimumTemp = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'minimumTemp' field has been set.
      * minimum current temp observed in the location
      * @return True if the 'minimumTemp' field has been set, false otherwise.
      */
    public boolean hasMinimumTemp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'minimumTemp' field.
      * minimum current temp observed in the location
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearMinimumTemp() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'maximumTemp' field.
      * maximum current temp observed in the location
      * @return The value.
      */
    public double getMaximumTemp() {
      return maximumTemp;
    }


    /**
      * Sets the value of the 'maximumTemp' field.
      * maximum current temp observed in the location
      * @param value The value of 'maximumTemp'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setMaximumTemp(double value) {
      validate(fields()[9], value);
      this.maximumTemp = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'maximumTemp' field has been set.
      * maximum current temp observed in the location
      * @return True if the 'maximumTemp' field has been set, false otherwise.
      */
    public boolean hasMaximumTemp() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'maximumTemp' field.
      * maximum current temp observed in the location
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearMaximumTemp() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'pressure' field.
      * Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa
      * @return The value.
      */
    public double getPressure() {
      return pressure;
    }


    /**
      * Sets the value of the 'pressure' field.
      * Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa
      * @param value The value of 'pressure'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setPressure(double value) {
      validate(fields()[10], value);
      this.pressure = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'pressure' field has been set.
      * Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa
      * @return True if the 'pressure' field has been set, false otherwise.
      */
    public boolean hasPressure() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'pressure' field.
      * Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearPressure() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'humidity' field.
      * observed humidity at the location in %
      * @return The value.
      */
    public double getHumidity() {
      return humidity;
    }


    /**
      * Sets the value of the 'humidity' field.
      * observed humidity at the location in %
      * @param value The value of 'humidity'.
      * @return This builder.
      */
    public com.weather.example.Weather.Builder setHumidity(double value) {
      validate(fields()[11], value);
      this.humidity = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'humidity' field has been set.
      * observed humidity at the location in %
      * @return True if the 'humidity' field has been set, false otherwise.
      */
    public boolean hasHumidity() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'humidity' field.
      * observed humidity at the location in %
      * @return This builder.
      */
    public com.weather.example.Weather.Builder clearHumidity() {
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Weather build() {
      try {
        Weather record = new Weather();
        record.observationDateTimeUnix = fieldSetFlags()[0] ? this.observationDateTimeUnix : (java.lang.Long) defaultValue(fields()[0]);
        record.location = fieldSetFlags()[1] ? this.location : (java.lang.String) defaultValue(fields()[1]);
        record.locationId = fieldSetFlags()[2] ? this.locationId : (java.lang.String) defaultValue(fields()[2]);
        record.country = fieldSetFlags()[3] ? this.country : (java.lang.String) defaultValue(fields()[3]);
        record.latitude = fieldSetFlags()[4] ? this.latitude : (java.lang.Double) defaultValue(fields()[4]);
        record.longitude = fieldSetFlags()[5] ? this.longitude : (java.lang.Double) defaultValue(fields()[5]);
        record.temp = fieldSetFlags()[6] ? this.temp : (java.lang.Double) defaultValue(fields()[6]);
        record.feelsLikeTemp = fieldSetFlags()[7] ? this.feelsLikeTemp : (java.lang.Double) defaultValue(fields()[7]);
        record.minimumTemp = fieldSetFlags()[8] ? this.minimumTemp : (java.lang.Double) defaultValue(fields()[8]);
        record.maximumTemp = fieldSetFlags()[9] ? this.maximumTemp : (java.lang.Double) defaultValue(fields()[9]);
        record.pressure = fieldSetFlags()[10] ? this.pressure : (java.lang.Double) defaultValue(fields()[10]);
        record.humidity = fieldSetFlags()[11] ? this.humidity : (java.lang.Double) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Weather>
    WRITER$ = (org.apache.avro.io.DatumWriter<Weather>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Weather>
    READER$ = (org.apache.avro.io.DatumReader<Weather>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.observationDateTimeUnix);

    out.writeString(this.location);

    out.writeString(this.locationId);

    out.writeString(this.country);

    out.writeDouble(this.latitude);

    out.writeDouble(this.longitude);

    out.writeDouble(this.temp);

    out.writeDouble(this.feelsLikeTemp);

    out.writeDouble(this.minimumTemp);

    out.writeDouble(this.maximumTemp);

    out.writeDouble(this.pressure);

    out.writeDouble(this.humidity);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.observationDateTimeUnix = in.readLong();

      this.location = in.readString();

      this.locationId = in.readString();

      this.country = in.readString();

      this.latitude = in.readDouble();

      this.longitude = in.readDouble();

      this.temp = in.readDouble();

      this.feelsLikeTemp = in.readDouble();

      this.minimumTemp = in.readDouble();

      this.maximumTemp = in.readDouble();

      this.pressure = in.readDouble();

      this.humidity = in.readDouble();

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.observationDateTimeUnix = in.readLong();
          break;

        case 1:
          this.location = in.readString();
          break;

        case 2:
          this.locationId = in.readString();
          break;

        case 3:
          this.country = in.readString();
          break;

        case 4:
          this.latitude = in.readDouble();
          break;

        case 5:
          this.longitude = in.readDouble();
          break;

        case 6:
          this.temp = in.readDouble();
          break;

        case 7:
          this.feelsLikeTemp = in.readDouble();
          break;

        case 8:
          this.minimumTemp = in.readDouble();
          break;

        case 9:
          this.maximumTemp = in.readDouble();
          break;

        case 10:
          this.pressure = in.readDouble();
          break;

        case 11:
          this.humidity = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










